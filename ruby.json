{
	"rspec request spec": {
		"prefix": "rspecreq",
		"body": [
			"# frozen_string_literal: true",
			"require 'rails_helper'",
			"",
			"RSpec.describe '${1:path_to_controller_or_file}', type: :request do",
			"  before do",
			"    ActionMailer::Base.deliveries.clear",
			"    DatabaseCleaner.clean_with(:truncation)",
			"",
			"    ${2:do_something}",
			"  end",
			"",
			"  after do",
			"    ActionMailer::Base.deliveries.clear",
			"    DatabaseCleaner.clean_with(:truncation)",
			"",
			"    ${3:do_something}",
			"  end",
			"",
			"  scenario '${4:first_scenario}' do",
			"    ${5:do_something}",
			"	end",
			"	",
			"end",
			""
		],
		"description": "rspec request spec"
	},
	"rails controller": {
		"prefix": "railscontroller",
		"body": [
			"# frozen_string_literal: true",
			"",
			"class ${1:controller_name}Controller < ${2:ApplicationController}",
			"  before_action :${3:authenticate_user!}",
			"",
			"  def index",
			"",
			"  end",
			"",
			"  def new",
			"",
			"  end",
			"",
			"  def create",
			"",
			"  end",
			"",
			"  def show",
			"",
			"  end",
			"",
			"  def edit",
			"",
			"  end",
			"",
			"  def update",
			"",
			"  end",
			"",
			"  def destroy",
			"",
			"  end",
			"",
			"  private",
			"  def ${4:model_params}",
			"    params.require(:${5:some_model}).permit(%i[",
			"      ${6:attributes_to_accept}",
			"    ])",
			"  end",
			"end"
		],
		"description": "rails controller"
	},
	"rspec expect block": {
		"prefix": "exp",
		"body": [
			"expect(${1:something}).${2:to} eq ${3:something_else}"
		],
		"description": "rspec expect block"
	},
	"rails model scope": {
		"prefix": "railsscope",
		"body": [
			"scope :${1:name}, -> { where(${2:something}) }"
		],
		"description": "rails model scope"
	},
}
